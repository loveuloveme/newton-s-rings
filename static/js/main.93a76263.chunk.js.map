{"version":3,"sources":["App.js","reportWebVitals.js","index.js","processData.js","utils.js"],"names":["App","props","canvasRef","React","createRef","fileRef","state","bg","dataIntense","Array","fill","dataMinMax","mainColor","e","this","_loadImage","context","current","getContext","img","Image","onload","drawImage","_calc","src","URL","createObjectURL","target","files","setState","alert","colorArray","i","push","getImageData","data","processData","intense","minMax","getAverageRGB","click","className","style","backgroundImage","onClick","_clickAdd","bind","onChange","_handleFileSelected","ref","type","width","height","generateData","options","maintainAspectRatio","generateMinLineData","a","b","generateMinData","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","grayscaleImageData","length","brightness","parseInt","pointMaxMin","max","min","maxX","minX","calc","getX","pointArr","lastDiff","Number","MIN_VALUE","x","arr","module","exports","MAX_VALUE","dataScaled","value","array","smoothing","newArray","sum","index","smoothArray","console","log","Math","floor","getLabels","list","y","r","xAvg","yAvg","xmAvg","ymAvg","xmAvgSq","xmAvgymAvg","forEach","item","reduce","dataMin","labelMin","labels","datasets","label","lineTension","backgroundColor","borderColor","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","lastX","approximate","rgb","g","count","blockSize"],"mappings":"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","file":"static/js/main.93a76263.chunk.js","sourcesContent":["import React from 'react';\nimport {Bubble, Line} from 'react-chartjs-2';\n\nimport './App.css';\n\nimport {processData, minMax} from './processData.js';\nimport {generateData, generateMinData, getAverageRGB, generateMinLineData} from './utils.js';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.canvasRef = React.createRef();\n        this.fileRef = React.createRef();\n\n        this.state = {\n            bg: \"\",\n            dataIntense: new Array(1280).fill(0),\n            dataMinMax: [],\n            mainColor: \"\"\n        }\n    }\n\n    _handleFileSelected(e){\n        this._loadImage(e);\n    }\n\n    _loadImage(e){\n        try{\n            var context = this.canvasRef.current.getContext('2d');\n            \n            var img = new Image();\n            img.onload = () => {\n                context.drawImage(img, 0, 0, 1280, 960);\n                this._calc();\n            }\n\n            img.src = URL.createObjectURL(e.target.files[0]);\n\n            this.setState({\n                bg: img.src\n            });\n        }catch(e){\n            alert(\"Something went wrong\");\n        }\n    }\n\n    _calc(){\n        var context = this.canvasRef.current.getContext('2d');\n\n        var colorArray = [];\n\n        for(var i = 0; i < 1280; i++){\n            colorArray.push(context.getImageData(i, 940, 1, 1).data);\n        }\n\n        this.setState({\n            dataIntense: processData(colorArray).intense,\n            dataMinMax: processData(colorArray).minMax,\n            mainColor: getAverageRGB(context.getImageData(0, 0, 1280, 960))\n        });\n    }\n\n    _clickAdd(){\n        this.fileRef.current.click();\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <section>\n                    <div\n                        className=\"canvas\"\n                        style={{backgroundImage: `url(${this.state.bg})`}}\n                        onClick={this._clickAdd.bind(this)}\n                    >\n                        <input\n                            className=\"canvas-input\"\n                            onChange={this._handleFileSelected.bind(this)}\n                            ref={this.fileRef}\n                            type=\"file\"\n                        />\n                        <canvas ref={this.canvasRef} width=\"1280\" height=\"960\"></canvas>\n                        \n                        {this.state.bg == \"\" ? <div className=\"canvas-add-image\">Загрузить</div>: <></>}\n                    </div>\n\n                    <div className=\"graph-wrapper\">\n                        <div className=\"graph\">\n                            <Line\n                                data={generateData(this.state.dataIntense, this.state.mainColor, this.state.dataMinMax)}\n                                options={{\n                                    maintainAspectRatio: false\n                                }}\n                            />\n                        </div>\n                        <div className=\"graph\">\n                            <div className=\"equa\">{\"f(x) = \"+(generateMinLineData(this.state.dataMinMax).a ? generateMinLineData(this.state.dataMinMax).a : \"?\") +\"x + \"+(generateMinLineData(this.state.dataMinMax).a ? generateMinLineData(this.state.dataMinMax).b : \"?\")}</div>\n                            <Line\n                                data={generateMinData(this.state.dataMinMax)}\n                                options={{maintainAspectRatio: false}}\n                            />\n                        </div>\n                    </div>\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","function grayscaleImageData(data) {    \r\n    for (var i = 0; i < data.length; i += 4) {\r\n        var brightness = parseInt(0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]);\r\n        data[i] = brightness\r\n        data[i + 1] = brightness\r\n        data[i + 2] = brightness\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction smoothArray(array, smoothing) {\r\n    var newArray = [];\r\n    for (var i = 50; i < array.length; i++) {\r\n        var sum = 0;\r\n\r\n        for (var index = i - smoothing; index <= i + smoothing; index++) {\r\n            var thisIndex = index < 0 ? index + array.length : index % array.length;\r\n            sum += array[thisIndex];\r\n        }\r\n        newArray[i] = sum/((smoothing*2)+1);\r\n    }\r\n\r\n    return newArray;\r\n}\r\n\r\n\r\nfunction processData(data){\r\n    var min = Number.MAX_VALUE;\r\n    var max = 0;\r\n\r\n    var dataScaled = [];\r\n\r\n    for(var i = 0; i < data.length; i++){\r\n        var value = grayscaleImageData(data[i])[0];\r\n\r\n        if(value < min) min = value;\r\n        if(value > max) max = value;\r\n\r\n        dataScaled.push(value);\r\n    }\r\n\r\n    dataScaled = smoothArray(dataScaled, 10);\r\n\r\n    // var end = false;\r\n    // for(var i = 1020; i < dataScaled.length - 1; i++){\r\n    //     if(!end){\r\n    //         if(dataScaled[i] > dataScaled[i + 1] && dataScaled[i] > dataScaled[i - 1]){\r\n    //             if(dataScaled[i] < max){\r\n    //                 end = true;\r\n    //             }\r\n    //         }else if(dataScaled[i] < dataScaled[i + 1] && dataScaled[i] < dataScaled[i - 1]){\r\n    //             if(dataScaled[i] > min){\r\n    //                 end = true;\r\n    //             }\r\n    //         }\r\n    //     }else{\r\n    //         dataScaled[i] = 0;\r\n    //     }\r\n    // }\r\n\r\n    var dataMinMax = minMax(dataScaled);\r\n    console.log(dataScaled);\r\n\r\n    var x = (dataMinMax[dataMinMax.length - 1].maxX + dataMinMax[dataMinMax.length - 1].minX)/2;\r\n\r\n    for(var i = 50; i < dataScaled.length; i++){\r\n        //dataScaled[i] -= dataScaled[50];\r\n    }\r\n\r\n    var arr = [];\r\n\r\n    if(x != -1){\r\n        for(var i = 0; i < Math.floor(x); i++){\r\n            arr.push(dataScaled[i]);\r\n        }\r\n\r\n        return {intense: arr, minMax: dataMinMax};\r\n    }\r\n\r\n    return {intense: dataScaled, minMax: dataMinMax};\r\n}\r\n\r\nfunction minMax(data){\r\n    function pointMaxMin(){\r\n        this.max = null;\r\n        this.min = null;\r\n        this.maxX = null;\r\n        this.minX = null;\r\n\r\n        this.calc = () => (this.max - this.min)/(this.max + this.min);\r\n        this.getX = () => (this.maxX+this.minX)/2;\r\n    }\r\n\r\n    var pointArr = [];\r\n\r\n    for(var i = 1; i < data.length - 1; i++){\r\n        if(data[i] > data[i + 1] && data[i] > data[i - 1]){\r\n            if(pointArr.length == 0){\r\n                pointArr.push(new pointMaxMin());\r\n            }\r\n            \r\n            pointArr[pointArr.length - 1].max = data[i];\r\n            pointArr[pointArr.length - 1].maxX = i;\r\n\r\n        }else if(data[i] < data[i + 1] && data[i] < data[i - 1]){\r\n            if(pointArr.length == 0){\r\n                continue;\r\n                //pointArr.push(new pointMaxMin());\r\n            }\r\n\r\n            if(pointArr[pointArr.length - 1].max == null) continue; \r\n\r\n            pointArr[pointArr.length - 1].min = data[i];\r\n            pointArr[pointArr.length - 1].minX = i;\r\n            pointArr.push(new pointMaxMin());\r\n        }\r\n    }\r\n\r\n    var lastDiff = Number.MIN_VALUE;\r\n    var x = -1;\r\n\r\n    for(var i = 0; i < pointArr.length; i++){\r\n        if((pointArr[i].max - pointArr[i].min) >= lastDiff){\r\n            lastDiff = pointArr[i].max - pointArr[i].min;\r\n\r\n            x = i;\r\n        }\r\n    }\r\n\r\n    if(x != -1){\r\n        var arr = [];\r\n        for(var i = 0; i < x; i++){\r\n            arr.push(pointArr[i]);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    return pointArr;\r\n}\r\n\r\nmodule.exports = {\r\n    processData,\r\n    minMax\r\n};","function getLabels(data){\r\n    var list = [];\r\n    for(var i = 0; i <= data.length; i++){\r\n        list.push(i);\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\nfunction generateData(data, mainColor, dataMinMax){\r\n    \r\n    var dataMin = [];\r\n    var labelMin = [];\r\n\r\n    for(var i = 0; i < dataMinMax.length; i++){\r\n        dataMin.push(dataMinMax[i].calc());\r\n        dataMin.push(dataMinMax[i].calc());\r\n\r\n        labelMin.push(dataMinMax[i].maxX);\r\n        labelMin.push(dataMinMax[i].minX);\r\n    }\r\n\r\n    return {\r\n        labels: getLabels(data),\r\n        datasets: [\r\n            {\r\n                type:'line',\r\n                label: 'Интенсивность',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: mainColor,\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'round',\r\n                pointBorderColor: mainColor,\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 1,\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: data\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nfunction generateMinLineData(dataMinMax){\r\n    var data = [];\r\n\r\n    for(var i = 0; i < dataMinMax.length; i++){\r\n        data.push({x: dataMinMax[i].maxX, y: dataMinMax[i].calc(), r: 1});\r\n        data.push({x: dataMinMax[i].minX, y: dataMinMax[i].calc(), r: 1});\r\n    }\r\n\r\n    if(data.length == 0) return [];\r\n\r\n    var x = [];\r\n    var y = [];\r\n\r\n    var xmAvg = [];\r\n    var ymAvg = [];\r\n    var xmAvgSq = [];\r\n    var xmAvgymAvg = [];\r\n\r\n    var xAvg = 0;\r\n    var yAvg = 0;\r\n\r\n    data.forEach(item => {\r\n        x.push(item.x);\r\n        y.push(item.y);\r\n    });\r\n\r\n    xAvg = x.reduce((a, b) => a + b, 0);\r\n    yAvg = y.reduce((a, b) => a + b, 0);\r\n\r\n    x.forEach(item => {\r\n        xmAvg.push(item - xAvg);\r\n        xmAvgSq.push((item - xAvg)*(item - xAvg));\r\n    });\r\n\r\n    y.forEach((item, index) => {\r\n        ymAvg.push(item - yAvg);\r\n        xmAvgymAvg.push(ymAvg[index]*xmAvg[index]);\r\n    });\r\n\r\n    var a = xmAvgymAvg.reduce((a, b) => a + b, 0)/xmAvgSq.reduce((a, b) => a + b, 0);\r\n    var b = yAvg-xAvg*a;\r\n\r\n    return {a, b};\r\n}\r\n\r\nfunction approximate(a, b, data){\r\n    if(data.length == 0) return [];\r\n    var calc = (x) => a*x+b;\r\n\r\n    var dataMin = [];\r\n    var labelMin = [];\r\n    \r\n    var lastX = data[data.length - 1].x;\r\n\r\n    for(var i = 0; i < Math.floor(lastX); i += 1){\r\n        labelMin.push(i);\r\n        dataMin.push(calc(i));\r\n    }\r\n\r\n    return{\r\n        labelMin,\r\n        dataMin\r\n    }\r\n}\r\n\r\n\r\nfunction generateMinData(dataMinMax){\r\n    var data = [];\r\n\r\n    for(var i = 0; i < dataMinMax.length; i++){\r\n        data.push({x: dataMinMax[i].maxX, y: dataMinMax[i].calc(), r: 1});\r\n        data.push({x: dataMinMax[i].minX, y: dataMinMax[i].calc(), r: 1});\r\n    }\r\n\r\n    var {a,b} = generateMinLineData(dataMinMax);\r\n    var {labelMin, dataMin} = approximate(a, b, data);\r\n\r\n    return {\r\n        labels: labelMin,\r\n        datasets: [\r\n            {\r\n                type: 'bubble',\r\n                label: 'V',\r\n                fill: false,\r\n                backgroundColor: '#e74c3c',\r\n                borderColor: '#c0392b',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'round',\r\n                pointBorderColor: '#c0392b',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 1,\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: data\r\n            },\r\n            {\r\n                type: 'line',\r\n                label: 'V(Аппроксимация)',\r\n                fill: false,\r\n                backgroundColor: '#3498db',\r\n                borderColor: '#3498db',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'round',\r\n                pointBorderColor: '#3498db',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 1,\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: dataMin\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nfunction getAverageRGB(data) {\r\n    \r\n    var blockSize = 5,\r\n        defaultRGB = {r:0,g:0,b:0},\r\n        data, width, height,\r\n        i = -4,\r\n        length,\r\n        rgb = {r:0,g:0,b:0},\r\n        count = 0;\r\n        \r\n    height = 960;\r\n    width = 1280;\r\n    \r\n\r\n    length = data.data.length;\r\n    \r\n    while ( (i += blockSize * 4) < length ) {\r\n        ++count;\r\n        rgb.r += data.data[i];\r\n        rgb.g += data.data[i+1];\r\n        rgb.b += data.data[i+2];\r\n    }\r\n\r\n    rgb.r = ~~(rgb.r/count);\r\n    rgb.g = ~~(rgb.g/count);\r\n    rgb.b = ~~(rgb.b/count);\r\n    \r\n    return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n    \r\n}\r\n\r\n\r\nmodule.exports = {\r\n    generateData, generateMinData, getAverageRGB, generateMinLineData\r\n}"],"sourceRoot":""}